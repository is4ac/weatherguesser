/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as GameOverImport } from './routes/game-over'
import { Route as IndexImport } from './routes/index'
import { Route as CitiesIndexImport } from './routes/cities/index'
import { Route as CitiesCityIndexImport } from './routes/cities/$city/index'

// Create/Update Routes

const GameOverRoute = GameOverImport.update({
  id: '/game-over',
  path: '/game-over',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CitiesIndexRoute = CitiesIndexImport.update({
  id: '/cities/',
  path: '/cities/',
  getParentRoute: () => rootRoute,
} as any)

const CitiesCityIndexRoute = CitiesCityIndexImport.update({
  id: '/cities/$city/',
  path: '/cities/$city/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/game-over': {
      id: '/game-over'
      path: '/game-over'
      fullPath: '/game-over'
      preLoaderRoute: typeof GameOverImport
      parentRoute: typeof rootRoute
    }
    '/cities/': {
      id: '/cities/'
      path: '/cities'
      fullPath: '/cities'
      preLoaderRoute: typeof CitiesIndexImport
      parentRoute: typeof rootRoute
    }
    '/cities/$city/': {
      id: '/cities/$city/'
      path: '/cities/$city'
      fullPath: '/cities/$city'
      preLoaderRoute: typeof CitiesCityIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/game-over': typeof GameOverRoute
  '/cities': typeof CitiesIndexRoute
  '/cities/$city': typeof CitiesCityIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/game-over': typeof GameOverRoute
  '/cities': typeof CitiesIndexRoute
  '/cities/$city': typeof CitiesCityIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/game-over': typeof GameOverRoute
  '/cities/': typeof CitiesIndexRoute
  '/cities/$city/': typeof CitiesCityIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/game-over' | '/cities' | '/cities/$city'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/game-over' | '/cities' | '/cities/$city'
  id: '__root__' | '/' | '/game-over' | '/cities/' | '/cities/$city/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GameOverRoute: typeof GameOverRoute
  CitiesIndexRoute: typeof CitiesIndexRoute
  CitiesCityIndexRoute: typeof CitiesCityIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GameOverRoute: GameOverRoute,
  CitiesIndexRoute: CitiesIndexRoute,
  CitiesCityIndexRoute: CitiesCityIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/game-over",
        "/cities/",
        "/cities/$city/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/game-over": {
      "filePath": "game-over.tsx"
    },
    "/cities/": {
      "filePath": "cities/index.tsx"
    },
    "/cities/$city/": {
      "filePath": "cities/$city/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
